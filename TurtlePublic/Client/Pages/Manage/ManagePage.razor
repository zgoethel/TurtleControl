@page "/admin"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject Turtle.IService turtles

<div class="p-3">

    <div class="d-flex flex-row" style="width: 100%;">
        <div class="d-flex flex-row">
            <h2 class="cursive">Devices</h2>

            <input type="checkbox" class="my-auto ms-4 me-2" id="allUsers" @bind="@allUsers" @bind:after="@ReloadTurtlesAsync" />
            <label for="allUsers" class="my-auto">All Users</label>
        </div>

        <div class="ms-auto d-flex">

            @if (string.IsNullOrEmpty(checkTag))
            {

                <i class="oi oi-reload my-auto me-3" style="cursor: pointer;" @onclick="@ReloadTurtlesAsync" />
                <button class="btn btn-secondary" @onclick="@BeginPairingAsync">Pair</button>
            
            } else
            {
                <div class="d-flex"
                    style="position: fixed;left: 0;top: 0;width: 100%;height: 100vh;background: #000000c0;z-index: 1000;">
                    
                    <div class="m-auto card p-3">

                        <p class="p-2 border border-dark rounded" hidden="@IsError">
                            Run
                            <br />
                            <c style="max-width: 100%;overflow-x: auto;display: block;white-space: nowrap;">
                                wget @checkTag
                            </c>
                            on your ComputerCraft device.
                        </p>

                        <center>
                            <div class="d-flex flex-column">
                                <h2 hidden="@IsError">Searching</h2>
                                <p hidden="@IsError" class="mt-2"><i class="spinner-border" /></p>
                                @if (!string.IsNullOrEmpty(status))
                                {
                                    <p><c>@status</c></p>
                                }

                                @*TODO*@
                                <button class="btn btn-secondary"
                                    @onclick="@(() => checkTag = status = "")">
                                    Cancel
                                </button>
                            </div>
                        </center>

                    </div>

                </div>
            }

        </div>
    </div>

    <div class="row mx-auto" style="width: 100%;">
        @foreach (var t in allTurtles)
        {
            <div class="col-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 my-3">
                <center>
                    @switch (t.CCType.ToLower())
                    {
                        case "turtle":
                            <img src="@Images.Turtle" width="80" />
                            break;
                        default:
                            <img src="@Images.Computer" width="80" />
                            break;
                    }
                    <h5 class="mt-2 mb-1">@t.CCType</h5>
                    <h1 class="mc-font">@t.CCNum</h1>
                    <span class="card mc-font" style="word-break: break-all;">
                        'world/computercraft/@t.RootPath'
                        <br />
                        Owned by @t.OwnerName
                        @if (t.LastEvent.HasValue)
                        {
                            <text>
                                <br />Most Recent Event:
                                <br />@t.LastEvent.Value.ToShortDateString()
                                <br />@t.LastEvent.Value.ToShortTimeString()
                            </text>
                        }
                    </span>
                    
                </center>
            </div>
        }
    </div>

</div>

@code {
    private List<Turtle.WithOwner> allTurtles = new();
    private bool allUsers = true;
    private string checkTag = "";
    private string status = "";
    private bool IsError => status.StartsWith("Error: ");
    private string Error => status.Substring("Error: ".Length);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadTurtlesAsync();
    }

    private async Task ReloadTurtlesAsync()
    {
        allTurtles.Clear();
        await InvokeAsync(StateHasChanged);

        allTurtles = await turtles.List(0, 20, allUsers, 0);
    }

    private async Task BeginPairingAsync()
    {
        checkTag = (await turtles.BeginPairing(0)).Link;
        status = "Preparing";
        await InvokeAsync(StateHasChanged);

        while (!string.IsNullOrEmpty(checkTag)
            && !status.StartsWith("Error:"))
        {
            await Task.Delay(2000);
            try
            {
                await turtles.CheckPairing(checkTag, 0);
                checkTag = status = "";
                await ReloadTurtlesAsync();
            } catch (Exception ex)
            {
                status = ex.Message;
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
