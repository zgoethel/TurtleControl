@page "/turtle/{_Id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@inject Turtle.IService turtles
@inject ToastService toasts

<PageTitle>Manage @turtle.CCType @turtle.CCNum</PageTitle>

@switch (turtle.Id)
{
    case 0:
        <center>
            <i class="spinner-border" />
        </center>
        break;
    case -1:
        <div class="alert alert-danger">
            @error
        </div>
        break;
    default:

        <div class="p-3">

            <div class="d-flex flex-row" style="width: 100%;">
                <div class="d-flex flex-row">
                    <h2 class="cursive">@turtle.CCType @turtle.CCNum</h2>
                </div>
            </div>

            <table class="table table-dark table-striped" style="max-width: 100%;overflow-x: scroll;">
                <colgroup>
                    <col style="width: 80px;" />
                    <col />
                    <col style="width: 260px;" />
                    <col style="width: 200px;" />
                </colgroup>
                <thead>
                    <tr>
                        <th>
                            <i class="oi oi-reload" style="cursor: pointer;"
                                @onclick=@(async () =>
                                {
                                    dirListing.Clear();
                                    await LoadPath(dirPath);
                                }) />
                        </th>
                        <th>Name</th>
                        <th>Package</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>

                    @if (dirPaths.Count > 0)
                    {
                        <tr>
                            <td>
                            </td>
                            <td>
                                <a href="javascript:void(0);"
                                    style="font-size: 1.1rem;color: white !important;"
                                    @onclick=@(async () =>
                                    {
                                        var prevPath = dirPaths.Peek();
                                        await LoadPath(prevPath);
                                        dirPaths.Pop();
                                    })>..</a>
                            </td>
                            <td>
                            </td>
                            <td>
                            </td>
                        </tr>
                    }

                    @foreach (var file in dirListing.OrderBy((it) => it.IsDir ? 0 : 1))
                    {
                        <tr>
                            <td>

                                <h5><i class="oi oi-@(file.IsDir ? "folder": "file") me-2" /></h5>
                            
                            </td>
                            <td>

                                <a href="javascript:void(0);" class="text-white"
                                    @onclick="@(async () => await HandleFileClickAsync(file))">
                                    @file.Path
                                </a>

                            </td>
                            <td>
                                <select class="form-select">
                                    <option>Please select</option>
                                </select>
                            </td>
                            <td>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>

        </div>

        break;
}

@code {
    [Parameter]
    public string _Id { get; set; }
    private int Id => int.TryParse(_Id, out var id) ? id : -1;

    private Turtle turtle = new();
    private string dirPath = "";
    private List<Turtle.SshFile> dirListing = new();
    private string error;
    private Stack<string> dirPaths = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if (Id > 0)
            {
                turtle = await turtles.Get(Id);
            } else
            {
                throw new Exception("Not found");
            }
        } catch (Exception ex)
        {
            turtle.Id = -1;
            error = ex.Message;
        }
        await LoadPath("");
    }

    private async Task LoadPath(string path)
    {
        try
        {
            dirPath = path;
            dirListing = await turtles.ListFiles(turtle.Id, dirPath, 0);
        } catch (Exception ex)
        {
            dirListing = new();
            await toasts.CreateToastAsync(new()
            {
                Message = ex.Message
            });
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleFileClickAsync(Turtle.SshFile file)
    {
        if (file.IsDir)
        {
            var _dirPath = dirPath;
            var newPath = dirPath.TrimEnd('/') + "/" + file.Path;
            await LoadPath(newPath);

            dirPaths.Push(_dirPath);
            await InvokeAsync(StateHasChanged);
        } else
        {
            var base64 = await turtles.DownloadFile(turtle.Id, dirPath, file.Path, 0);
            var bytes = Convert.FromBase64String(base64.Base64Bytes);
            var str = "";
            try
            {
                str = System.Text.Encoding.UTF8.GetString(bytes);
            } catch (Exception)
            {
                str = "Non UTF-8";
            }
            await toasts.CreateToastAsync(new()
            {
                CustomContent =
                    @<div class="mx-3">
                        <pre style="font-family: monospace !important">@str</pre>
                    </div>
            });
        }
    }
}