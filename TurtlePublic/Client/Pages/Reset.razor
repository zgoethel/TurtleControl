@page "/reset"
@page "/reset/{Token}"
@inject Account.IService accounts

<PageTitle>Reset</PageTitle>

<div class="d-flex flex-row my-7 px-3" style="width: 100%;">

    <div class="m-auto p-3 card" style="background: grey;width: 330px;max-width: 100%;">
        <h3 class="mb-4">Reset</h3>

        @if (loading)
        {
            <div class="d-flex flex-row p-3" style="width: 100%;">
                <i class="spinner-border m-auto" />
            </div>
        } else if (string.IsNullOrEmpty(result))
        {

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger">
                    @error
                </div>
            }

            @if (string.IsNullOrEmpty(Token))
            {
                <p class="mb-4">Enter your account's email to get started.</p>

                <label for="email">Email</label>
                <input name="email" type="text" class="form-control" @bind="@emailAddress" />
                <br />

                <button class="btn btn-primary" @onclick="@StartResetAsync">Send Email</button>
            } else if (account is not null)
            {
                <p>Welcome, @(account?.FirstName).</p>
                <p class="mb-4">Please select a new password for your account.</p>
                <label for="email">Password</label>
                <input type="password" class="form-control" @bind="@password" />
                <br />
                <label for="email">Repeat Password</label>
                <input type="password" class="form-control" @bind="@repeat" />
                <br />

                <button class="btn btn-primary" @onclick="@SetPasswordAsync">Set Password</button>
            }

        } else
        {
            <div class="alert alert-success">
                @result <a href="login">Return to Login</a>
            </div>
        }
    </div>

</div>

@code {
    [Parameter]
    public string Token { get; set; }

    private string emailAddress = "";
    private string password = "", repeat = "";
    private string error = "";
    private string result = "";
    private Account account;
    private bool loading = false;

    private async Task StartResetAsync()
    {
        error = "";
        loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await accounts.BeginReset(emailAddress);
            result = "Password reset email has been sent";
        } catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            loading = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(Token))
        {
            try
            {
                account = await accounts.GetResetDetails(Token);
            } catch (Exception ex)
            {
                error = ex.Message;
            }

            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetPasswordAsync()
    {
        error = "";
        loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (password != repeat)
            {
                throw new Exception("Password fields must match");
            }

            await accounts.ResetPassword(Token, password);
            result = "New password has been set";
        } catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }
}