@page "/login"
@page "/logout"
@using Microsoft.AspNetCore.Authorization;
@attribute [AllowAnonymous]
@inject Account.IService accounts
@inject IModelApiAdapter apiAdapter
@inject NavigationManager navMan

<PageTitle>Login</PageTitle>

<div class="d-flex flex-row my-7 px-3 flex-grow-1 flex-shrink-1 site-bg-grey"
    style="width: 100%;">

    <div class="mx-auto mt-4 p-3 card" style="background: grey;width: 330px;max-width: 100%;height: fit-content;">
        <h3 class="mb-4 cursive">Login</h3>

        @if (loading)
        {
            <div class="d-flex flex-row p-3" style="width: 100%;">
                <i class="spinner-border m-auto" />
            </div>
        } else if (string.IsNullOrEmpty(result))
        {

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger">
                    @error
                </div>
            }

            <label for="username">Username</label>
            <input name="username" type="text" class="form-control mb-4" @bind="@email" />
            
            <label for="password">Password</label>
            <input type="password" class="form-control mb-4" @bind="@password" />

            <div class="d-flex flex-row" style="width: 100%;">
                <button class="btn btn-primary" @onclick="@LogInAsync">Log In</button>
                <a href="reset" class="ms-auto my-auto">Reset password</a>
            </div>

        } else
        {
            <div class="alert alert-success">
                @result
            </div>
        }
    </div>

</div>

@code {
    private string email = "";
    private string password = "";
    private string error = "";
    private string result = "";
    private bool loading = true;

    override protected async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (navMan.Uri.EndsWith("logout"))
        {
            await LogOutAsync();
        } else
        {
            loading = false;
        }
    }

    private async Task LogInAsync()
    {
        error = "";
        loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var account = await accounts.AttemptLogin(email, password);
            if (account is null)
            {
                throw new Exception("No account returned from database");
            } else
            {
                result = "Login success";
                await (apiAdapter as ModelApiAdapter).StoreSessionTokenAsync(account);

                navMan.NavigateTo("");
            }
        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.ToString());
            error = "Username or password is incorrect";
        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LogOutAsync()
    {
        await accounts.LogOut();
        await (apiAdapter as ModelApiAdapter).DestroySessionTokenAsync();

        navMan.NavigateTo("");
    }
}