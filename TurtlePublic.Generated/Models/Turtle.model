schema {
	int Id,
	string CCType = {""},
	int CCNum,
	int? CohortId,
	string RootPath = {""},
	int? OwnerId,
	bool IsPublic
}

partial WithOwner {
	string OwnerName = {""},
	DateTime? LastEvent,
	string LastEventType
}

partial WithDetails {
	string OwnerName = {""}
}

{
	public class CheckTagLink
	{
		public string Link { get; set; } = "";
	}

	public class FileDownload
	{
		public string Base64Bytes { get; set; } = "";
	}

	public class SshFile
	{
		public string Path { get; set; } = "";
		public bool IsDir { get; set; }
	}
}

repo {
	Turtle_List(int page, int count, int _userId)
		=> List<Turtle.WithOwner>,

	Turtle_GetById(int id)
		=> Turtle.WithDetails,

	Turtle_Register(string ccType, int ccNum, string rootPath, int _userId)
		=> Turtle,

	Turtle_Set(int id, int? cohortId)
		=> Turtle,

	Turtle_SetIsPublic(int id, bool isPublic)
		=> Turtle
}

service {
	Get(int id)
		=> Turtle.WithDetails,
		
	Get(int id, int _userId)
		=> Turtle.WithDetails,

	List(int page, int count, bool allUsers, int _userId)
		=> List<Turtle.WithOwner>,

	BeginPairing(int _userId)
		=> CheckTagLink,

	CheckPairing(string checkTag, int _userId)
		=> Turtle,

	GeneratePair(string checkTagSuffix)
		=> string,

	Set(int id, int? cohortId, int _userId)
		=> Turtle,

	Share(int id, int _userId)
		=> Turtle,

	Unshare(int id, int _userId)
		=> Turtle,

	ListFiles(int id, string path, int _userId)
		=> List<Turtle.SshFile>,

	DownloadFile(int id, string path, string file, int _userId)
		=> Turtle.FileDownload
}